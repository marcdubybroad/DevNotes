
T 2:50pm - state of kotlin
  - @zmarkan
  - #2 popular language
  - 35% android devs use kotlin
  - survey, jan to march
    - 2744 responses, 15 avg min to complete
    - 34% 205 yrs exp, 9% 15+
    - most K uers are company emp,oyees, less students
    - 33% 2-5 peoplein company (so product team level)
    - quote: it's like java++
    - how to start leanring
      - 46% IO 2017 when started (when officially supported)
      - 54% jetbrain official resources, 12% talks and demos
        - kotlin weekly newsletter
    - other langs
      - 83% java, 16% python, JS 24%
    - where
      - 80% android, 31% bac end, 31% libs
        - data scince migh be growing as well, but small now
    - how much in code base
      - higher personal, but usually 75% work code base
    - features
      - 80% null safty, 65% ext functons, 62% jaa introp, 61% data classes
        - 25% coroutines (even thogh beta)
        - doesn' get in the wy of geting job done
    - 77% use extension functions
      - dsl buiders, null checks
    - 87% migrated code java to kotlin
      - most use wizard or rewrtoe manaually
      - 25% migrated back
       - automatic migration isn't nice code, doesn't do null assertions
       - probs with dependencies
         - som using reflection
         - everthing in K is fina;
         - could've been old version
           - one where spring had issues
    - 29% used coroutines
      - could replace rxJava
      - ven though still experimental
      - anything threading related, used with schedulers
    - 41% have used as DSL
      - a lot popl use kotlin for gradle
    - 25% used K beyond android/JVM
      - kotlin naive most popular, ollowed by kotlin JS
      - look at touchlab/DroidconKotlin
    - mssing features that are desired
      - more syntax sugar
      - tertianry operator
      - single abstract methods
      - pattern matching
      - more custom operators
      -
    - what not liked
      - companion obejcts, how K does statics
      - eetyhting public and final
      - K not dynamic
    - tools
      - a stdion, intellij, gradle
    - what libs
     - koin, arrow, spek, ktx, kluent, ktor, kotlin android extensions, dokka, okio, knarch
     - quote: mortal kombt of prog langs
  - pusher.om/state-of-kotlin
    - dadaset in kaggle
    
  
  
  
  
  

T 2:00pm - growing teams, poloton team
  - peolotn sits bween fitness, hardware and media
  
  - 20 months ago, 3 android engineers
    - now 20 android engineer, 100 engineers total
  - small team vs large team
    - direct comm vs cross team
      - teams can dveelop their own patterns
      
  - growing while rmaining efficient
     - small teams, don't add too much process early on
     - flow for growth
       - dicussion -> decosion -> outcome --> back to discussion
       - town suqare format
         - inclusive venue
         - produce actionabe decision
         - communicates decision, document (helps with eople who are out, new personnel later)
        - avoid multiple tiers within your team
         - enforce decisions
           - put extra things in CI, in github
           - also nforced throug code rviews
      - iterate, then iterate again
        - env will change
          - team, coworkrs will change
        - use your town square
          - when things change
        - no decision perfrect
        - no decision final, including tghre process
        
  - peloton town square
    - weekly open meeting
    - pre meeting agenda
    - follows a set teplate
    - only takes as long as needed
    - sample doc sections:
      - agenda
      - dicussion
      - action items
        - assign to people, could be extra research
    - example
      - used to use MVP
      - people found some cons to switching to pattern
      - MVVM proposed
      - pros/cons discussed
        - cost of refactoing
      - action item assigned to investigate MVVM
        - try refactoring feature
        
      - next TH
        - MVVM shown beneficial
      - decision to adopt MVV
      - doc created, training
      - started using it
      - but saw issues on higher density screens
        - had sync issues when users changing during workout
      - outcome discussed in next town square
      - issue was multiple state changes coming from the different comps
        - wasn't unidirectilan data flow, mutli direction
        - looked at MVI to see if that would help
      - developed the nw approach/framework
        - create docs, confluence page, pairing session time, tutorials
        - code review as enforcement tool
      - outcome
        - written in kotlin
        - supplements MVVM
        - glbal state app (Redux)
          - single source of data for app
          - any state change gets proapgated to observers
        - reative state consumets
        - expandable via middlewares
          - built into expandable way
        - coming 2019
        
  - small thngs
    - gogoleJavaFomat
    - code ownershio
    - pull request labels
    - danger plugin
      - pull request at less than 500 lines
    
  - considerayitons
    - very large teams
      - town hall currently works for 20 engineers
      - break into multile when more members added?
    - minority opinions
      - everyone needs to be heard
    - action items with no progress
    - things take time
      - no quick turnround
      - make sure get rest of company buy in
      
  - results
    - consistent delivery
    - happier team
      
      
    
         
         
       
     
    
    