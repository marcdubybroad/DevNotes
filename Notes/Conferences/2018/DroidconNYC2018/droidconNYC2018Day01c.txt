

- M 5:50pm - Text in android
  - classes
    - PrecomputedText
    - TextView.getTextMetricsParams
    - PrecomputedTextCompat
  - pitfalls
    - inflation costs
      - create less TextView objects
      - can try to combine into one text view
        - use SpannableString
        - can set different looks bsed on text span
    - setText()
      - every time, garbage collection for each write of old string
      - when provide a mutable object to text view, it creates immutable copy
      - if use allCaps method, it creates another copy of your input
        - might actually store both versions, so memory hit
    - checking fos spans
      - creates array to traverse it
        - copies all the data
        
    - Spannables
    
    - don't use in recylerview for text -> android:autoLink="web"
      - heavy on operations
      - instead
        - LinkifyCompat.
        
    - editable text
      -
      
  - keep in mind that whem text is input from android keyboard, the letters might not come one after the other
    - might be autocomplete, whole wrod deletion and replace, typo editing
    - so creates and deletes spans, etc
    - ca be coslty
    - InputFilter class is fired
      - due to .setText() and .replace() when backtracking or fixing typos
    
  - resources
    - github.com/siyamed/droidcon-nyc-18
    - @siyamed
    
  - research on my own
    - EmojiCompat
    
    

- M 5:00pm - Images, square dev
  - tumbor server size
    - use thi servic for image cropping
    - don't ask Picasso to do that
  - picasso pollexir module
  
  - notes
    - look at square/okhttp
    
  - new picasso will now upgrade from okhttp v2 to v3 for its networkREquestHandler )
   - since it is abstracted out, it was easy to swap out new code
   
  - square android libs
    - retrofit
    - moshi
    - wire
    - okio
      - 
    - okhttp
    - picasso
  
  

- M 4:10pm - Testing mock and, Brain Gardner, Big Nerd Ranch
  - @BrianGardnerAtl
  - test dobles
    - mocks
    - stubs
    - spies
    - dummies
    - fakes
  - test types
    - unit
      - object
    - integration
      - one particular sub system
    - end to end
      - all the system
      
  - when to use TestDoubles
    - when have indirect inputs or p=outputs
    
  - mocks
    - fit well in uni tests
    - mock is objct that records what you do to it
    - can also return data
    - 2 types:
      - lenient
        - if calls out of order from specified, not care
      - strict
        - fail if methods called out of order
        
  - stubs
    - provide data for your application
      - handle indirect inputs
    - types
      - responder
      - saboteur
        - if something goes wrong, throw exception
      - temporary
        - for TDD, coul start in prod main dir (not test dir)
        
  - spies
    - combinations for mocks and stubs
    - useful for integration tests
    
  - dummies
    - doesn't do much, there to fill ou parameter list
    - good for unit
    
  - fakes
    - replace real implementation for one better suited for testing
    - best for integration tests
    
  - libraries
    - mockito
      - does have mock obejts
      - can also ,ock interfaces
      - can add verifications on mock bejcts
    - stubs not so great
    - spies
    - dummies
    - doesn't have fakes
    
  - recap
    - don't overuse your test doubles
    - look at Fowler
    - new Kotlin book
    
    
    
    