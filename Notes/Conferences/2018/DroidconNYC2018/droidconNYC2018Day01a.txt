
- M 1:30pm - firebase and arch comps, stevenson, firebase
  - code: bit.ly/2NtAuQP
    - github.com/CodingDoug/firebase-jetpack
  - firestore
    - cloud nosql db
  - LiveData and ViewModel
    - LiveData is observable
    - aware of android lifecycle
      - onStop(), onStart()
      - automatically collected on onDestroy()
  - firestore
    - have collection
      - then docuements within the collection
        - then sub collections and fields
    - val firestore = FirebaseFresotre.getInstance()
    - var ref = firestore.collection("collection-name").document("docu-name")
    
  - if subclass liveData
    - override onActive(), onInactive(), onEvent()
    
  - LiveData will lose data on configuration change
    - use ViewModel to survive config change
    - VM lifecycle aware
  - class StokViewModel {
        private Repository                  // repository will contain firetsore instance and ops
        private Map cacheDataMap
      }
    
  - firebase sdk has its own data cache, so don't need to use room if turn on Firebase sdk cache
  
  - what about errors
    - need to bubble up errors to UI
    - has exception class
      - DataOrException
        - stock price object is either price or exception (using Kotlin)
        
  - firestore query
    - FirebaseFirestroe.getInstance().collection("").orderBy("")
       .listener()

    - listens to changes
    
  - for adapter recycler changes notification
    - RecyclerView extension ListAdapter
     - keeps from redrawing the whole list to avoid jumpy RecyclerView list
     - need to implements DiffUtil.ItemCallback<T>
       - methods: areItemsTheSame, areContentsTheSame (and 1 otners)
       
  - should you use Firebase this way?
    - do you realy need live data
    - could be good for appending results as they come in
    - could also have a refresh button for lists, since might not be interested in latest ; can activate it if !onContentsTheSame()
    
  - for background sync for offline use
    - realtime db in forestore has offline cache 
      - but what if app is not runing?
        - look at jetpack WorkManager
          - period of time to work
          - ontraints (battery level, network, etc)
          - work chaining
        - ex:
          - val constraints
          - vat query
          - queue up query
        - cons
          - not like cron to run every hour (but specific time?)
    - can also do server push
      - firebase cloud messaging push notification
      - on notification, sync with WorkManager process
      - FirebaseMessagingService
        - schedule one time sync with WorkManager
          - make one time work request, give it constraint and query
          - make sure to replace one scheduled before
          - con: WorkManager api is synchronous
          
      
      
      
- M 11:50am - archtect app with MVP, VewModel, stephen d'amico
  - @sddamico, android lead at seatgeek.com
  - MVMVP
    - model view + mvp
  - MVP tricky with async code
    - so regiggered MVP
  - damico github code -> MvMvpdemo (sddamico)
    - slides on speakerdeck
  - approach
    - have interfaces for presenter and and view
    - have MvpPresentedBase to attach to views
    
    - for each presenter and interface
      - define a contract of what APIs will be communicated
    - then hook up the presenter to the activity
    
  - MVP makes test of biz logic easier
  
- if add aync to MVP
  - RxJava, kotlin ciroutines
  -
  
- ViewModel
  - can specify your own scopes
  - put objects in ViewModel that are too big for inSavedInstanceState()
  - if app is backgrounded, ViewModel will be cleaned out
  - scope can be activity or fragment
    - read up about dependency injection into ViewModel, could be tricky
  - for MVP, presenter could hold state between config changes
   
   
   
- android data binding
  - code generation tool for mapping data to view
  - uses enhanced xml layout where you can insert variables
    - <data>
      <variable name="model" type=""/>
    - then in layout
      - android:text="@{model.count}"
  
  
- alernative frameworks
  - inspired by Redux, MVVM, MVI
  - building your own architecture gives you more flexibility
  - one size doesn't fit all, so look at all of them
    - but don't reinvest the wheel if don't have to
    

- terms used
  - behavior: observable that also has a value
    
  
  
