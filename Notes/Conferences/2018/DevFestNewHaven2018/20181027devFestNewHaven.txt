

DevFest New Haven - 2018101727

0200pm talk - deep learning for images
- neural nets
  - simple neural net
    - 1 hidden layer
  - deep neural nets
    - multiple hidden layers
    
- ML is 60 year old tech

- why now
  - more powerful GPUs
    - matrix multiplication
  - better optimization techniques
    - activation functions
    - regularization techniques
    - faster convergence algorithms
  
- types of learning 
  - supervised learning
    - regression (continuous Y)
    - classification (discrete Y)
  - unsupervised learning
    - no Ys, just Xs
  - reinforcement learning
    - rewards amd penalties
      - alphago and self driving cars (deep reinforcement learning)
      
- data is everything
  - for training
  - for validation
  - for testing
  
- regression
  - linear
    - predict continuous value by fitting line through data
    - cre operation that happens in every neuron of neural network
    - y` = b + w1x1 + w2x2 + w3x3 ...
      - b is bias term, not depedent on the data
      - optimization -> gradient descent
        - calculate the gradient of the cost function with respect to your params
      - cost function: (sum(sqr(y` - y)))/2m
        - goal is to minimize this
        
  - polynomial regression
    - if use too many params/degrees, then overfitting to data (and noise of the data)
    
  - logistic
    - extension of linear (and polynomial) regression
      - applies non linearity on the regression output
      - it is a classification algorithm
      - decision boundary can be a curve
        - so applied on top of polynomial regression as opposed to linear model
        - ie: y = x1x2 + x1^2 + x2^2
    - loss function is not a sum square like linear
      - because not trying to fit line
      
- so logistic regression can be
  - on top of linear regression
  - on top of polinomial egression
  
- logistic regression
  - can be viewed as 2 operations for each neuron
    - weighted sum of inputs
    - applies non linear operation to the results
      
  - each neurons learn different things
  
  - hierarchical representation of knowledge
    - outputs of first neuron passed to input of next layer
    - first layer learns simplest features (edges)
      - second layer build on first and learns a little more complicated features (circles from the edges)
      - different layers encode knowledge/understanding in increasing order of complexity
    - can be stacked to learn more complex patterns
      - unique in terms of extensibility
      
- fully connected neural nets
  - each subsequent layer neuron connect to all previous layer neurons
  - good for analyzing structured data
    - not good for images (image is 2d structure)
        
- back propagation
  - successive application of partial diff and chaning rule
  - go back layer by layer
  - run until loss is below certain value
  
- multi class classification
  - take linear output
  - softmax activation function
    - as opposed to a sigmoid activation function
    
- CNN
  - not fully connected (too computationaly expensive)
    - also not 2d structure preserving (for fullly connected network)
    - not sparse
      - image is usuallly localized
      
  - components
    - convolution layer
      - move 2d array of numbers over image, compute results that goes to new image size array
      - can also do 3d convolution
      - ie: usually extracts features
    - max pooling layer
      - ie: takes 4 x 4 matrix and turns into 2 x 2 matrix by taking max of each 1/4 of 4 x 4 matrix (so from 16 numbers to 4)
      - ie: can also do avg pooling
      - ie: shrinks the inputs for the next layer
    - fully connected layer at end
      - just not added at beginning, appear at the end once features have been abstracted by the convolution and pooling layers
      - ie: this layer links features to objects/labels
      
  - activation functions (non linearity)
    - ReLU (rectified linear unit)
    - Leaky ReLU
    - sigmoid
    - softmax
    
    
- applications of CNN
  - image classification
  - object detection
  - neural style transfer
    - take 2 images and combine into 1 (have the content of 1 and the style of the other)
  
- notable CNN archs
  - resnet
  - googlenet
  - VGG-16
  - VVG-19
  
- if have too deep NN, it is hard for variants to back propogate all the way back to the first layer

- neural style transfer

- what layers recognize
  - layer 1: edges
  - layer 2: concepts, like circles
  - layer 3:
  
  
- other deep learning
  - GANs: try to generate data
  -
  
  
  
0300pm talk - testing android archs
- why arch
  - so that app is robust and testable
  
- Model View Presenter (MVP)
  - model contacts presenter, then presenter contacts the view
  - the presenter acts as go between of model and view
    - presenter will be in pure java code
  - view is the activity
  
  
- MVVM
  - persistent data store for view to consume
  - ViewModel
    -
  - architecture comps in jetpack API
  - uses observables
  - providers
    - take all view models to put in one provider?
    
  
- observables
  - mobe powerful than listeners
  - can create chaining of observabes
    

- Model View Intent
  - this is all observables
  - similar to react native
  - layers
    - model
    - view
    - intents: eveything that the user wants to do
      - have idea of state
        - watever screen and model is at the point in time
        - for each screen, it has a set of states
          - sets observable chain so that you end up in one of those states
          - state reducer
          - you should never have an app that ends up in a bad state
          
  - read blog post
    - hans dorfman
    
    
    
0400pm - ML kit and android
- speaker info
  - gdg wilmington
  - one GDG NE mentors
  - @VarPete


- ML kit
  - bring google ml models t mobile
  - bot on device or o cloud processing
  - available through firebase
  - 5 ready to use sdks
  - deploy custom TF lite models
  - production ready for most use cases
  - no guarantee of backward accessibility
  
- SDKs
  - image label
  - text recognition
  - face detection
  - barcode scanning
  - landmark recognition
  
- all examples on github, part of mlkit

- image label
  - cloud or on device
    - device
      - 400 object labels, get at most 10 labels at a time
    - cloud
      - get 10,000 objects
  - identifies entities
  - confidence scores
  - use for
    - automaic metadata generation
  - demo
    - scan room with phone, get labels to show of what it sees
    
- text recognition
  - cloud or on device
    - device
      - free, real time processing
    - cloud
      - paid after 1k, highly accurate
  - extracts and segments text from images
  - use for
    - translation, accessibility, tracking
  - demo
    - see text on screen highlighted out, apache license from computer

- face detection
  - on device only
  - real time
  - identifies key facial features, also mood
    - track faces across frames
  - use for
    - generate avatar
    - detect expressions and respond
    - make selfies more awesome
  - demo

- barcode scanning
  - on device only
  - reads most standard formats'
  - extraction of structured data
    - url, contact, wifi
  - automatic detection
  - use for
    - automaic metadata generation
  - demo


- landmark recognotion
  - cloud only
  - name and geographic coords
  - detect region within supplied image
  - demo
          
- tensor flow lite
  - on device only
  - models bundled or on the cloud
  - auto downoad models
  
- steps for ml kit?
  - android dependencies
    - firebase-ml-vision:18.0.1
    -
    
  - image conversion
    - from media.image.*
    - from ByteBuffer.*
    - from Bitmap
    - from file
    
  - detectors
    - obtaon FirebaseImage*Detector
    - FirebaseImageVisionImage.detectInImage()
    
  - 
  
- steps for TF lite
  - dependencies
    - firebase-ml-model-interpreter:8.1.0
  - register model
    - .setAssetFilePath('mymodel.tfliet')


- models to come to mlkit
  - smart reply
  - enhanced face detection (contors)
  
- links
  - firebase.google.com/docs/ml-kit
  - developers.googleblog.com/2018/05/introducing-ml-kit.html
  - github.com/firebase/quickstart-android/tree/master/mlkit


